user www-data;

pid /var/run/nginx.pid;

worker_processes auto;

load_module /etc/nginx/modules/ngx_http_image_filter_module.so;

events {
	worker_connections 1024;
}


http {
	
	# geoip
	# geoip_country /etc/nginx/geoip/GeoIP.dat;
	# geoip_city /etc/nginx/geoip/GeoLiteCity.dat;

	# hide nginx version
	server_tokens off;
	
	# configure microcache (fastcgi)
	# fastcgi_cache_path /tmp/nginx_cache levels=1:2 keys_zone=ZONE_1:100m inactive=60m;
	# fastcgi_cache_key "$scheme$request_method$host$request_uri";
	# add_header X-Cache $upstream_cache_status;

	# add mime type
	include mime.types;

	# define limit rate
	# limit_req_zone $request_uri zone=MYZONE:10m rate=1r/s; 

	# redirect all traffic to https
	# server {
	#	listen 80;
	#	server_name 192.168.137.167;
	#	return 301 https://$host$request_uri;
	# }

	# enable gzip
	# gzip on;
	# gzip_comp_level 3;
	# gzip_types text/css;
	# gzip_types text/javascript;

	# manual add MIME Type
	# types {
	#	text/html	html;
	#	text/css	css;
	# }

	# buffer size for POST submissions
	# client_body_buffer_size 10K;
	# client_max_body_size 8m;

	# buffer size for headers
	# client_header_buffer_size 1k;

	# max time to receive client headers/body
	# client_body_timeout 12;
	# client_header_timeout 12;

	# max time to keep a connection open for
	# keepalive_timeout 15;

	# max time for the client accept/receive a response
	# send_timeout 10;

	# skip buffering for static files
	# sendfile on;

	# optimize sendfile packets
	# tcp_nopush on;  


	server {

		# listen 80;
		listen 443 ssl http2;
		server_name  192.168.137.167;

		root /vagrant/data/sites/demo;

		# index index.php index.html;
		index index.html;

		# geoip
		# location /geo_country {
		#	return 200 "Visiting from $geoip_country_name";
		# }

		# disable x-frame / click jacking
		add_header X-Frame-Options "SAMEORIGIN";		
		add_header X-XSS-Protection "1; mode=block";

		# add cert ssl
		ssl_certificate /etc/nginx/ssl/self.cert;
		ssl_certificate_key /etc/nginx/ssl/self.key;

		# location = /index.html {
		#	http2_push /style.css;
		#	http2_push /thumb.png;
		# }

		# disable ssl
		ssl_protocols TLSv1 TLSv1.1 TLSv1.2;

		# optimize cipher suits
		ssl_prefer_server_ciphers on;
		ssl_ciphers ECDH+AESCM:ECDH+AES256:ECDH+AES128:DH+3DES:!ADH:!AECDH:!MD5;

		# enable dh params
		ssl_dhparam /etc/nginx/ssl/dhparam.pem;

		# enable hsts
		add_header Strict-Transport-Security "max-age-31536000" always;

		# ssl sessions
		ssl_session_cache shared:SSL:40m;
		ssl_session_timeout 4h;
		ssl_session_tickets on;

		# cache by default
		# set $no_cache 0;

		# check for cache bypass
		# if ( $arg_skipcache = 1 ) {
		#	set $no_cache 1;
		# }
	
		location / {
		#	limit_req zone=MYZONE burst=5 nodelay;
		#	auth_basic "Secure Area";
		#	auth_basic_user_file /etc/nginx/.htpasswd;
			try_files $uri $uri/ =404;
		}

		# mp4 streaming
		# location ~ \.mp4$ {
		#	root /sites/downoads/;
		#	mp4;
		#	mp4_buffer_size 4M;
		#	mp4_max_buffer_size 10M;
		# }

		# serve php file
		location ~\.php$ {
			# pass php request to the php-fpm service (fastcgi)
			include fastcgi.conf; 
			fastcgi_pass unix:/run/php/php7.0-fpm.sock;
		}	

		# enable cache
		# fastcgi_cache ZONE_1;
		# fastcgi_cache_valid 200 60m;
		# fastcgi_cache_valid 404 10m;
		# fastcgi_cache_bypass $no_cache;
		# fastcgi_no_cache $no_cache;

		# header and expire
		# location ~* \.(css|js|jpg|png)$ {
		#	add_header my_header "Hello world";
		#	access_log off;
		#	add_header Cache-Control public;
		#	add_header Pragma public;
		#	add_header Vary Accept-Encoding;
		#	expires 1M;
		# }

		# using module image
		# location = /thumb.png {
		#	image_filter rotate 180;
		# }

		# location /secure {
		#	access_log off;
		#	access_log /var/log/nginx/secure.access.log;
		#	return 200 "Welcome to secure area";
		# }
		
		# prefix match specific uri
		# location /greet {
		#	return 200 'Hello from NGINX "/greet" location - PREFIX MATCH';
		# }

		# exact match
		# location = /greet {
		#	return 200 'Hello from "NGINX"/greet location - EXACT MATCH';
		# }

		# regex match - case sensitive
		# location ~ /greet[0-9] {                                                
		#	return 200 'Hello from "NGINX"/greet location - REGEX MATCH';
		# }

		# regex match - case insensitive                                       
		# location ~* /greet[0-9] {                                             
		#	return 200 'Hello from "NGINX"/greet location - REGEX MATCH';
		# }                                                                    
                                                                                                                                     
		# preferential prefix match                                            
                # location ^~ /Greet2 {                                                   
                #        return 200 'Hello from "NGINX"/greet location - PREFERENCE MATCH';       
                # }    

		# variable - nginx embedded
		# location /inspect {
		#	return 200 "$host\n$uri\n$args";
		# }

		# variable - nginx embedded - custom args             
		# location /inspect {                    
		#	return 200 "Name: $arg_name";
		# }

		# check status API key
		# if ( $arg_apikey != 1234) {
		#	return 401 "Incorrect API key";
		# }

		# custom variable
		# set $weekend 'No';
		
		# if ( $date_local ~ 'Saturday|Sunday' ) {
		#	set $weekend 'Yes';
		# }

		# location /is_weekend {
		#	return 200 $weekend;
		# }

		# redirect
		# location /logo {
		#	return 307 /thumb.png;
		# }

		# rewrite
		# rewrite ^/user/(\w+) /greet/$1 last; # last = last passing/evaluate rewrite

		# pass optional flag
                # rewrite ^/greet/john /thumb.png

		# location /greet {
		#	return 200 "Hello User";
		# }

		# location = /greet/john {
		#	return 200 "Hello John";
		# }

		# try_files example
		# try_files $uri /chat.png /greet @friendly_404;

		# location @friendly_404 {
		#	return 404 "Sorry, that file could not be found";
		# }

		# location /greet {
		#	return 200 "Hello User";
		# }

                                
	}
}

















